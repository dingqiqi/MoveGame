apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.dingqiqi.testmove9image"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            resources.srcDirs = ['src/main/java', 'src/main/aidl']
            aidl.srcDirs = ['src/main/aidl']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    //签名
    signingConfigs {
        r {
            storeFile file(CERT_NAME)
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
        d {
            storeFile file(CERT_NAME)
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.r
            //混淆开关
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.d
            minifyEnabled false
            versionNameSuffix "-beta"
        }
    }


    lintOptions {
        abortOnError false
    }
}

build {
    doLast {
        tasks.copyTaskWithPatterns.execute()
    }
}

task copyTaskWithPatterns(type: Copy) {
    def versionName = android.defaultConfig.versionName
    from "${buildDir}/outputs/apk/"
    into RELEASE_DIR + PRODUCT_NAME + "/" + versionName

    // 不拷贝未签名的文件.
    exclude { details ->
        details.file.name.contains('-unaligned') ||
                details.file.name.contains('-unsigned') ||
                !details.file.name.contains(versionName)
    }
    include "**/*.apk"
}

task renameOut(type: Copy) {
    def versionName = android.defaultConfig.versionName
    from RELEASE_DIR + versionName
    into RELEASE_DIR + versionName
    rename { String fileName ->
        if (fileName.contains(PROJECT_NAME)) {
            fileName.replace(PROJECT_NAME, PRODUCT_NAME)
        }
    }
}
task makePretty(type: Delete) {
    def versionName = android.defaultConfig.versionName
    FileTree tree = fileTree(dir: RELEASE_DIR + versionName);

    tree.each { File file ->
        if (!file.name.contains(PRODUCT_NAME)) {
            delete(file)
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.1.0'
}
